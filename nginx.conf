user                www-data;
worker_processes    auto;
load_module         /usr/lib/nginx/modules/ngx_stream_module.so;
error_log           /var/log/nginx/error.log warn;
pid                 /var/run/nginx.pid;

events
{
    worker_connections	1024;
}

#  Configuration du reverse proxy http pour utiliser la configuration située en /etc/nginx/conf.d/*.conf
http
{
    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;
    log_format main     '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';
    access_log          /var/log/nginx/access.log main;
    sendfile            on;
    keepalive_timeout   65;
    include             /etc/nginx/conf.d/*.conf;
}

# Utilisation du module "stream" d'NGINX
stream
{
    # Définition de l'upstream pour l'ingestion des logs graylog_syslog_tcp
    # Ajouter un ligner "server" par noeud dans le cluster
    upstream graylog_syslog_tcp
    {
        server 192.168.xxx.xxx:10514 max_fails=3 fail_timeout=30s;

    }
    server
    {
        listen 10514;
        proxy_pass graylog_syslog_tcp;
        proxy_timeout 3600s;
        error_log /var/log/nginx/graylog_syslog_tcp.log;
    }   
    
    # Définition de l'upstream pour l'ingestion des logs beats_tcp
    # Ajouter un ligner "server" par noeud dans le cluster
    upstream graylog_beats
    {
        server 192.168.xxx.xxx:5044 max_fails=3 fail_timeout=30s;
    }
    server
    {
        listen 5044;
        proxy_pass graylog_beats;
        proxy_timeout 3600s;
        error_log /var/log/nginx/graylog_beats.log;
    }
}
